import time
import datetime
import json
import requests
from samsungtvws import SamsungTVWS  # Install with `pip install samsungtvws`

# TV connection details
TV_IP = "192.168.1.X"  # Replace with your Samsung TV's IP
TOKEN_FILE = "tv_token.txt"

# YouTube Data API (replace with your own API key)
YOUTUBE_API_KEY = "YOUR_YOUTUBE_API_KEY"
YOUTUBE_VIDEO_INFO_URL = "https://www.googleapis.com/youtube/v3/videos"

# Connect to Samsung TV
tv = SamsungTVWS(host=TV_IP, token_file=TOKEN_FILE)

# Store video logs
video_log = {}

def get_current_video_id():
    """Extract the current YouTube video ID (depends on API availability)."""
    app_status = tv.rest_app_status()
    if "YouTube" in app_status.get("app", {}).get("title", ""):
        url = app_status.get("app", {}).get("url", "")
        if "youtube.com/watch?v=" in url:
            return url.split("v=")[-1].split("&")[0]  # Extract Video ID
    return None

def fetch_video_details(video_id):
    """Fetch video details using YouTube API."""
    params = {
        "id": video_id,
        "key": YOUTUBE_API_KEY,
        "part": "snippet"
    }
    response = requests.get(YOUTUBE_VIDEO_INFO_URL, params=params)
    data = response.json()
    
    if "items" in data and len(data["items"]) > 0:
        snippet = data["items"][0]["snippet"]
        return {
            "title": snippet.get("title", "Unknown"),
            "description": snippet.get("description", ""),
            "channel": snippet.get("channelTitle", "Unknown"),
        }
    return {}

def monitor_youtube():
    """Continuously monitor YouTube video playback and log data."""
    current_video_id = None
    while True:
        new_video_id = get_current_video_id()
        
        if new_video_id and new_video_id != current_video_id:
            now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # Log previous video end time
            if current_video_id and current_video_id in video_log:
                video_log[current_video_id]["end_time"] = now

            # Fetch new video details
            video_details = fetch_video_details(new_video_id)

            # Store new video log entry
            video_log[new_video_id] = {
                "video_id": new_video_id,
                "title": video_details.get("title"),
                "description": video_details.get("description"),
                "channel": video_details.get("channel"),
                "start_time": now,
                "end_time": None,  # Will be updated when a new video starts
            }

            print(f"New video started: {video_details.get('title')}")
        
        current_video_id = new_video_id
        time.sleep(5)  # Adjust polling frequency as needed

if __name__ == "__main__":
    monitor_youtube()
